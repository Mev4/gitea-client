/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CombinedStatus holds the combined state of several statuses for a single commit
 */
@Schema(description = "CombinedStatus holds the combined state of several statuses for a single commit")
public class CombinedStatus {
  @SerializedName("commit_url")
  private String commitUrl;

  @SerializedName("repository")
  private Repository repository;

  @SerializedName("sha")
  private String sha;

  @SerializedName("state")
  private String state;

  @SerializedName("statuses")
  private List<CommitStatus> statuses;

  @SerializedName("total_count")
  private Long totalCount;

  @SerializedName("url")
  private String url;

  public CombinedStatus commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

  /**
   * Get commitUrl
   *
   * @return commitUrl
   **/
  @Schema(description = "")
  public String getCommitUrl() {
    return commitUrl;
  }

  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }

  public CombinedStatus repository(Repository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   *
   * @return repository
   **/
  @Schema(description = "")
  public Repository getRepository() {
    return repository;
  }

  public void setRepository(Repository repository) {
    this.repository = repository;
  }

  public CombinedStatus sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * Get sha
   *
   * @return sha
   **/
  @Schema(description = "")
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }

  public CombinedStatus state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   *
   * @return state
   **/
  @Schema(description = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public CombinedStatus statuses(List<CommitStatus> statuses) {
    this.statuses = statuses;
    return this;
  }

  public CombinedStatus addStatusesItem(CommitStatus statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<CommitStatus>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * Get statuses
   *
   * @return statuses
   **/
  @Schema(description = "")
  public List<CommitStatus> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<CommitStatus> statuses) {
    this.statuses = statuses;
  }

  public CombinedStatus totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   *
   * @return totalCount
   **/
  @Schema(description = "")
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }

  public CombinedStatus url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   *
   * @return url
   **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedStatus combinedStatus = (CombinedStatus) o;
    return Objects.equals(this.commitUrl, combinedStatus.commitUrl) &&
           Objects.equals(this.repository, combinedStatus.repository) &&
           Objects.equals(this.sha, combinedStatus.sha) &&
           Objects.equals(this.state, combinedStatus.state) &&
           Objects.equals(this.statuses, combinedStatus.statuses) &&
           Objects.equals(this.totalCount, combinedStatus.totalCount) &&
           Objects.equals(this.url, combinedStatus.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitUrl, repository, sha, state, statuses, totalCount, url);
  }


  @Override
  public String toString() {

    String sb = "class CombinedStatus {\n" +
                "    commitUrl: " + toIndentedString(commitUrl) + "\n" +
                "    repository: " + toIndentedString(repository) + "\n" +
                "    sha: " + toIndentedString(sha) + "\n" +
                "    state: " + toIndentedString(state) + "\n" +
                "    statuses: " + toIndentedString(statuses) + "\n" +
                "    totalCount: " + toIndentedString(totalCount) + "\n" +
                "    url: " + toIndentedString(url) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
