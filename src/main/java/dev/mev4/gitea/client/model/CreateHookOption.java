/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CreateHookOption options when create a hook
 */
@Schema(description = "CreateHookOption options when create a hook")
public class CreateHookOption {
  @SerializedName("active")
  private Boolean active = false;

  @SerializedName("authorization_header")
  private String authorizationHeader;

  @SerializedName("branch_filter")
  private String branchFilter;

  @SerializedName("config")
  private CreateHookOptionConfig config;

  @SerializedName("events")
  private List<String> events;
  @SerializedName("type")
  private TypeEnum type;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("dingtalk")
    DINGTALK("dingtalk"),
    @SerializedName("discord")
    DISCORD("discord"),
    @SerializedName("gitea")
    GITEA("gitea"),
    @SerializedName("gogs")
    GOGS("gogs"),
    @SerializedName("msteams")
    MSTEAMS("msteams"),
    @SerializedName("slack")
    SLACK("slack"),
    @SerializedName("telegram")
    TELEGRAM("telegram"),
    @SerializedName("feishu")
    FEISHU("feishu"),
    @SerializedName("wechatwork")
    WECHATWORK("wechatwork"),
    @SerializedName("packagist")
    PACKAGIST("packagist");

    private final String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String) (value));
      }
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }

  public CreateHookOption active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   *
   * @return active
   **/
  @Schema(description = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public CreateHookOption authorizationHeader(String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
    return this;
  }

  /**
   * Get authorizationHeader
   *
   * @return authorizationHeader
   **/
  @Schema(description = "")
  public String getAuthorizationHeader() {
    return authorizationHeader;
  }

  public void setAuthorizationHeader(String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
  }

  public CreateHookOption branchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
    return this;
  }

  /**
   * Get branchFilter
   *
   * @return branchFilter
   **/
  @Schema(description = "")
  public String getBranchFilter() {
    return branchFilter;
  }

  public void setBranchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
  }

  public CreateHookOption config(CreateHookOptionConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   *
   * @return config
   **/
  @Schema(required = true, description = "")
  public CreateHookOptionConfig getConfig() {
    return config;
  }

  public void setConfig(CreateHookOptionConfig config) {
    this.config = config;
  }

  public CreateHookOption events(List<String> events) {
    this.events = events;
    return this;
  }

  public CreateHookOption addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<String>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   *
   * @return events
   **/
  @Schema(description = "")
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }

  public CreateHookOption type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   **/
  @Schema(required = true, description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateHookOption createHookOption = (CreateHookOption) o;
    return Objects.equals(this.active, createHookOption.active) &&
           Objects.equals(this.authorizationHeader, createHookOption.authorizationHeader) &&
           Objects.equals(this.branchFilter, createHookOption.branchFilter) &&
           Objects.equals(this.config, createHookOption.config) &&
           Objects.equals(this.events, createHookOption.events) &&
           this.type == createHookOption.type;
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, authorizationHeader, branchFilter, config, events, type);
  }


  @Override
  public String toString() {

    String sb = "class CreateHookOption {\n" +
                "    active: " + toIndentedString(active) + "\n" +
                "    authorizationHeader: " + toIndentedString(authorizationHeader) + "\n" +
                "    branchFilter: " + toIndentedString(branchFilter) + "\n" +
                "    config: " + toIndentedString(config) + "\n" +
                "    events: " + toIndentedString(events) + "\n" +
                "    type: " + toIndentedString(type) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
