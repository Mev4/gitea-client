/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * OAuth2Application
 */

public class OAuth2Application {
  @SerializedName("client_id")
  private String clientId;

  @SerializedName("client_secret")
  private String clientSecret;

  @SerializedName("confidential_client")
  private Boolean confidentialClient;

  @SerializedName("created")
  private OffsetDateTime created;

  @SerializedName("id")
  private Long id;

  @SerializedName("name")
  private String name;

  @SerializedName("redirect_uris")
  private List<String> redirectUris;

  @SerializedName("skip_secondary_authorization")
  private Boolean skipSecondaryAuthorization;

  public OAuth2Application clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   *
   * @return clientId
   **/
  @Schema(description = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public OAuth2Application clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Get clientSecret
   *
   * @return clientSecret
   **/
  @Schema(description = "")
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }

  public OAuth2Application confidentialClient(Boolean confidentialClient) {
    this.confidentialClient = confidentialClient;
    return this;
  }

  /**
   * Get confidentialClient
   *
   * @return confidentialClient
   **/
  @Schema(description = "")
  public Boolean isConfidentialClient() {
    return confidentialClient;
  }

  public void setConfidentialClient(Boolean confidentialClient) {
    this.confidentialClient = confidentialClient;
  }

  public OAuth2Application created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   *
   * @return created
   **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public OAuth2Application id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public OAuth2Application name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OAuth2Application redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public OAuth2Application addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<String>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * Get redirectUris
   *
   * @return redirectUris
   **/
  @Schema(description = "")
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }

  public OAuth2Application skipSecondaryAuthorization(Boolean skipSecondaryAuthorization) {
    this.skipSecondaryAuthorization = skipSecondaryAuthorization;
    return this;
  }

  /**
   * Get skipSecondaryAuthorization
   *
   * @return skipSecondaryAuthorization
   **/
  @Schema(description = "")
  public Boolean isSkipSecondaryAuthorization() {
    return skipSecondaryAuthorization;
  }

  public void setSkipSecondaryAuthorization(Boolean skipSecondaryAuthorization) {
    this.skipSecondaryAuthorization = skipSecondaryAuthorization;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Application oauth2Application = (OAuth2Application) o;
    return Objects.equals(this.clientId, oauth2Application.clientId) &&
           Objects.equals(this.clientSecret, oauth2Application.clientSecret) &&
           Objects.equals(this.confidentialClient, oauth2Application.confidentialClient) &&
           Objects.equals(this.created, oauth2Application.created) &&
           Objects.equals(this.id, oauth2Application.id) &&
           Objects.equals(this.name, oauth2Application.name) &&
           Objects.equals(this.redirectUris, oauth2Application.redirectUris) &&
           Objects.equals(this.skipSecondaryAuthorization, oauth2Application.skipSecondaryAuthorization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientSecret, confidentialClient, created, id, name, redirectUris, skipSecondaryAuthorization);
  }


  @Override
  public String toString() {

    String sb = "class OAuth2Application {\n" +
                "    clientId: " + toIndentedString(clientId) + "\n" +
                "    clientSecret: " + toIndentedString(clientSecret) + "\n" +
                "    confidentialClient: " + toIndentedString(confidentialClient) + "\n" +
                "    created: " + toIndentedString(created) + "\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    redirectUris: " + toIndentedString(redirectUris) + "\n" +
                "    skipSecondaryAuthorization: " + toIndentedString(skipSecondaryAuthorization) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
