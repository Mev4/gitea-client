/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * MarkdownOption markdown options
 */
@Schema(description = "MarkdownOption markdown options")
public class MarkdownOption {
  @SerializedName("Context")
  private String context;

  @SerializedName("Mode")
  private String mode;

  @SerializedName("Text")
  private String text;

  @SerializedName("Wiki")
  private Boolean wiki;

  public MarkdownOption context(String context) {
    this.context = context;
    return this;
  }

  /**
   * URL path for rendering issue, media and file links Expected format: /subpath/{user}/{repo}/src/{branch, commit, tag}/{identifier/path}/{file/dir}  in: body
   *
   * @return context
   **/
  @Schema(description = "URL path for rendering issue, media and file links Expected format: /subpath/{user}/{repo}/src/{branch, commit, tag}/{identifier/path}/{file/dir}  in: body")
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }

  public MarkdownOption mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Mode to render (markdown, comment, wiki, file)  in: body
   *
   * @return mode
   **/
  @Schema(description = "Mode to render (markdown, comment, wiki, file)  in: body")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public MarkdownOption text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text markdown to render  in: body
   *
   * @return text
   **/
  @Schema(description = "Text markdown to render  in: body")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public MarkdownOption wiki(Boolean wiki) {
    this.wiki = wiki;
    return this;
  }

  /**
   * Is it a wiki page? (use mode&#x3D;wiki instead)  Deprecated: true in: body
   *
   * @return wiki
   **/
  @Schema(description = "Is it a wiki page? (use mode=wiki instead)  Deprecated: true in: body")
  public Boolean isWiki() {
    return wiki;
  }

  public void setWiki(Boolean wiki) {
    this.wiki = wiki;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarkdownOption markdownOption = (MarkdownOption) o;
    return Objects.equals(this.context, markdownOption.context) &&
           Objects.equals(this.mode, markdownOption.mode) &&
           Objects.equals(this.text, markdownOption.text) &&
           Objects.equals(this.wiki, markdownOption.wiki);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, mode, text, wiki);
  }


  @Override
  public String toString() {

    String sb = "class MarkdownOption {\n" +
                "    context: " + toIndentedString(context) + "\n" +
                "    mode: " + toIndentedString(mode) + "\n" +
                "    text: " + toIndentedString(text) + "\n" +
                "    wiki: " + toIndentedString(wiki) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
