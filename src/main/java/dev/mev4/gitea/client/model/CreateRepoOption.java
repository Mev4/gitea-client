/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;

/**
 * CreateRepoOption options when creating repository
 */
@Schema(description = "CreateRepoOption options when creating repository")
public class CreateRepoOption {
  @SerializedName("auto_init")
  private Boolean autoInit;

  @SerializedName("default_branch")
  private String defaultBranch;

  @SerializedName("description")
  private String description;

  @SerializedName("gitignores")
  private String gitignores;

  @SerializedName("issue_labels")
  private String issueLabels;

  @SerializedName("license")
  private String license;

  @SerializedName("name")
  private String name;
  @SerializedName("object_format_name")
  private ObjectFormatNameEnum objectFormatName;
  @SerializedName("private")
  private Boolean _private;
  @SerializedName("readme")
  private String readme;
  @SerializedName("template")
  private Boolean template;
  @SerializedName("trust_model")
  private TrustModelEnum trustModel;

  /**
   * ObjectFormatName of the underlying git repository
   */
  @JsonAdapter(ObjectFormatNameEnum.Adapter.class)
  public enum ObjectFormatNameEnum {
    @SerializedName("sha1")
    SHA1("sha1"),
    @SerializedName("sha256")
    SHA256("sha256");

    private final String value;

    ObjectFormatNameEnum(String value) {
      this.value = value;
    }

    public static class Adapter extends TypeAdapter<ObjectFormatNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectFormatNameEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ObjectFormatNameEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ObjectFormatNameEnum.fromValue((String) (value));
      }
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectFormatNameEnum fromValue(String input) {
      for (ObjectFormatNameEnum b : ObjectFormatNameEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }

  /**
   * TrustModel of the repository
   */
  @JsonAdapter(TrustModelEnum.Adapter.class)
  public enum TrustModelEnum {
    @SerializedName("default")
    DEFAULT("default"),
    @SerializedName("collaborator")
    COLLABORATOR("collaborator"),
    @SerializedName("committer")
    COMMITTER("committer"),
    @SerializedName("collaboratorcommitter")
    COLLABORATORCOMMITTER("collaboratorcommitter");

    private final String value;

    TrustModelEnum(String value) {
      this.value = value;
    }

    public static class Adapter extends TypeAdapter<TrustModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrustModelEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TrustModelEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TrustModelEnum.fromValue((String) (value));
      }
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrustModelEnum fromValue(String input) {
      for (TrustModelEnum b : TrustModelEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }

  public CreateRepoOption autoInit(Boolean autoInit) {
    this.autoInit = autoInit;
    return this;
  }

  /**
   * Whether the repository should be auto-initialized?
   *
   * @return autoInit
   **/
  @Schema(description = "Whether the repository should be auto-initialized?")
  public Boolean isAutoInit() {
    return autoInit;
  }

  public void setAutoInit(Boolean autoInit) {
    this.autoInit = autoInit;
  }

  public CreateRepoOption defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * DefaultBranch of the repository (used when initializes and in template)
   *
   * @return defaultBranch
   **/
  @Schema(description = "DefaultBranch of the repository (used when initializes and in template)")
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }

  public CreateRepoOption description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the repository to create
   *
   * @return description
   **/
  @Schema(description = "Description of the repository to create")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateRepoOption gitignores(String gitignores) {
    this.gitignores = gitignores;
    return this;
  }

  /**
   * Gitignores to use
   *
   * @return gitignores
   **/
  @Schema(description = "Gitignores to use")
  public String getGitignores() {
    return gitignores;
  }

  public void setGitignores(String gitignores) {
    this.gitignores = gitignores;
  }

  public CreateRepoOption issueLabels(String issueLabels) {
    this.issueLabels = issueLabels;
    return this;
  }

  /**
   * Label-Set to use
   *
   * @return issueLabels
   **/
  @Schema(description = "Label-Set to use")
  public String getIssueLabels() {
    return issueLabels;
  }

  public void setIssueLabels(String issueLabels) {
    this.issueLabels = issueLabels;
  }

  public CreateRepoOption license(String license) {
    this.license = license;
    return this;
  }

  /**
   * License to use
   *
   * @return license
   **/
  @Schema(description = "License to use")
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }

  public CreateRepoOption name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the repository to create
   *
   * @return name
   **/
  @Schema(required = true, description = "Name of the repository to create")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateRepoOption objectFormatName(ObjectFormatNameEnum objectFormatName) {
    this.objectFormatName = objectFormatName;
    return this;
  }

  /**
   * ObjectFormatName of the underlying git repository
   *
   * @return objectFormatName
   **/
  @Schema(description = "ObjectFormatName of the underlying git repository")
  public ObjectFormatNameEnum getObjectFormatName() {
    return objectFormatName;
  }

  public void setObjectFormatName(ObjectFormatNameEnum objectFormatName) {
    this.objectFormatName = objectFormatName;
  }

  public CreateRepoOption _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * Whether the repository is private
   *
   * @return _private
   **/
  @Schema(description = "Whether the repository is private")
  public Boolean isPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }

  public CreateRepoOption readme(String readme) {
    this.readme = readme;
    return this;
  }

  /**
   * Readme of the repository to create
   *
   * @return readme
   **/
  @Schema(description = "Readme of the repository to create")
  public String getReadme() {
    return readme;
  }

  public void setReadme(String readme) {
    this.readme = readme;
  }

  public CreateRepoOption template(Boolean template) {
    this.template = template;
    return this;
  }

  /**
   * Whether the repository is template
   *
   * @return template
   **/
  @Schema(description = "Whether the repository is template")
  public Boolean isTemplate() {
    return template;
  }

  public void setTemplate(Boolean template) {
    this.template = template;
  }

  public CreateRepoOption trustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
    return this;
  }

  /**
   * TrustModel of the repository
   *
   * @return trustModel
   **/
  @Schema(description = "TrustModel of the repository")
  public TrustModelEnum getTrustModel() {
    return trustModel;
  }

  public void setTrustModel(TrustModelEnum trustModel) {
    this.trustModel = trustModel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRepoOption createRepoOption = (CreateRepoOption) o;
    return Objects.equals(this.autoInit, createRepoOption.autoInit) &&
           Objects.equals(this.defaultBranch, createRepoOption.defaultBranch) &&
           Objects.equals(this.description, createRepoOption.description) &&
           Objects.equals(this.gitignores, createRepoOption.gitignores) &&
           Objects.equals(this.issueLabels, createRepoOption.issueLabels) &&
           Objects.equals(this.license, createRepoOption.license) &&
           Objects.equals(this.name, createRepoOption.name) &&
           this.objectFormatName == createRepoOption.objectFormatName &&
           Objects.equals(this._private, createRepoOption._private) &&
           Objects.equals(this.readme, createRepoOption.readme) &&
           Objects.equals(this.template, createRepoOption.template) &&
           this.trustModel == createRepoOption.trustModel;
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoInit, defaultBranch, description, gitignores, issueLabels, license, name, objectFormatName, _private, readme, template, trustModel);
  }


  @Override
  public String toString() {

    String sb = "class CreateRepoOption {\n" +
                "    autoInit: " + toIndentedString(autoInit) + "\n" +
                "    defaultBranch: " + toIndentedString(defaultBranch) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    gitignores: " + toIndentedString(gitignores) + "\n" +
                "    issueLabels: " + toIndentedString(issueLabels) + "\n" +
                "    license: " + toIndentedString(license) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    objectFormatName: " + toIndentedString(objectFormatName) + "\n" +
                "    _private: " + toIndentedString(_private) + "\n" +
                "    readme: " + toIndentedString(readme) + "\n" +
                "    template: " + toIndentedString(template) + "\n" +
                "    trustModel: " + toIndentedString(trustModel) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
