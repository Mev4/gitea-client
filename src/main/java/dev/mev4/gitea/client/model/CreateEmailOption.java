/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CreateEmailOption options when creating email addresses
 */
@Schema(description = "CreateEmailOption options when creating email addresses")
public class CreateEmailOption {
  @SerializedName("emails")
  private List<String> emails;

  public CreateEmailOption emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public CreateEmailOption addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<String>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * email addresses to add
   *
   * @return emails
   **/
  @Schema(description = "email addresses to add")
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEmailOption createEmailOption = (CreateEmailOption) o;
    return Objects.equals(this.emails, createEmailOption.emails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emails);
  }


  @Override
  public String toString() {

    String sb = "class CreateEmailOption {\n" +
                "    emails: " + toIndentedString(emails) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
