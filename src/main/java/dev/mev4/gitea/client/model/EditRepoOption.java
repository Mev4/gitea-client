/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * EditRepoOption options when editing a repository&#x27;s properties
 */
@Schema(description = "EditRepoOption options when editing a repository's properties")
public class EditRepoOption {
  @SerializedName("allow_fast_forward_only_merge")
  private Boolean allowFastForwardOnlyMerge;

  @SerializedName("allow_manual_merge")
  private Boolean allowManualMerge;

  @SerializedName("allow_merge_commits")
  private Boolean allowMergeCommits;

  @SerializedName("allow_rebase")
  private Boolean allowRebase;

  @SerializedName("allow_rebase_explicit")
  private Boolean allowRebaseExplicit;

  @SerializedName("allow_rebase_update")
  private Boolean allowRebaseUpdate;

  @SerializedName("allow_squash_merge")
  private Boolean allowSquashMerge;

  @SerializedName("archived")
  private Boolean archived;

  @SerializedName("autodetect_manual_merge")
  private Boolean autodetectManualMerge;

  @SerializedName("default_allow_maintainer_edit")
  private Boolean defaultAllowMaintainerEdit;

  @SerializedName("default_branch")
  private String defaultBranch;

  @SerializedName("default_delete_branch_after_merge")
  private Boolean defaultDeleteBranchAfterMerge;

  @SerializedName("default_merge_style")
  private String defaultMergeStyle;

  @SerializedName("description")
  private String description;

  @SerializedName("enable_prune")
  private Boolean enablePrune;

  @SerializedName("external_tracker")
  private ExternalTracker externalTracker;

  @SerializedName("external_wiki")
  private ExternalWiki externalWiki;

  @SerializedName("has_actions")
  private Boolean hasActions;

  @SerializedName("has_issues")
  private Boolean hasIssues;

  @SerializedName("has_packages")
  private Boolean hasPackages;

  @SerializedName("has_projects")
  private Boolean hasProjects;

  @SerializedName("has_pull_requests")
  private Boolean hasPullRequests;

  @SerializedName("has_releases")
  private Boolean hasReleases;

  @SerializedName("has_wiki")
  private Boolean hasWiki;

  @SerializedName("ignore_whitespace_conflicts")
  private Boolean ignoreWhitespaceConflicts;

  @SerializedName("internal_tracker")
  private InternalTracker internalTracker;

  @SerializedName("mirror_interval")
  private String mirrorInterval;

  @SerializedName("name")
  private String name;

  @SerializedName("private")
  private Boolean _private;

  @SerializedName("projects_mode")
  private String projectsMode;

  @SerializedName("template")
  private Boolean template;

  @SerializedName("website")
  private String website;

  public EditRepoOption allowFastForwardOnlyMerge(Boolean allowFastForwardOnlyMerge) {
    this.allowFastForwardOnlyMerge = allowFastForwardOnlyMerge;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow fast-forward-only merging pull requests, or &#x60;false&#x60; to prevent fast-forward-only merging.
   *
   * @return allowFastForwardOnlyMerge
   **/
  @Schema(description = "either `true` to allow fast-forward-only merging pull requests, or `false` to prevent fast-forward-only merging.")
  public Boolean isAllowFastForwardOnlyMerge() {
    return allowFastForwardOnlyMerge;
  }

  public void setAllowFastForwardOnlyMerge(Boolean allowFastForwardOnlyMerge) {
    this.allowFastForwardOnlyMerge = allowFastForwardOnlyMerge;
  }

  public EditRepoOption allowManualMerge(Boolean allowManualMerge) {
    this.allowManualMerge = allowManualMerge;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow mark pr as merged manually, or &#x60;false&#x60; to prevent it.
   *
   * @return allowManualMerge
   **/
  @Schema(description = "either `true` to allow mark pr as merged manually, or `false` to prevent it.")
  public Boolean isAllowManualMerge() {
    return allowManualMerge;
  }

  public void setAllowManualMerge(Boolean allowManualMerge) {
    this.allowManualMerge = allowManualMerge;
  }

  public EditRepoOption allowMergeCommits(Boolean allowMergeCommits) {
    this.allowMergeCommits = allowMergeCommits;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow merging pull requests with a merge commit, or &#x60;false&#x60; to prevent merging pull requests with merge commits.
   *
   * @return allowMergeCommits
   **/
  @Schema(description = "either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.")
  public Boolean isAllowMergeCommits() {
    return allowMergeCommits;
  }

  public void setAllowMergeCommits(Boolean allowMergeCommits) {
    this.allowMergeCommits = allowMergeCommits;
  }

  public EditRepoOption allowRebase(Boolean allowRebase) {
    this.allowRebase = allowRebase;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow rebase-merging pull requests, or &#x60;false&#x60; to prevent rebase-merging.
   *
   * @return allowRebase
   **/
  @Schema(description = "either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.")
  public Boolean isAllowRebase() {
    return allowRebase;
  }

  public void setAllowRebase(Boolean allowRebase) {
    this.allowRebase = allowRebase;
  }

  public EditRepoOption allowRebaseExplicit(Boolean allowRebaseExplicit) {
    this.allowRebaseExplicit = allowRebaseExplicit;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow rebase with explicit merge commits (--no-ff), or &#x60;false&#x60; to prevent rebase with explicit merge commits.
   *
   * @return allowRebaseExplicit
   **/
  @Schema(description = "either `true` to allow rebase with explicit merge commits (--no-ff), or `false` to prevent rebase with explicit merge commits.")
  public Boolean isAllowRebaseExplicit() {
    return allowRebaseExplicit;
  }

  public void setAllowRebaseExplicit(Boolean allowRebaseExplicit) {
    this.allowRebaseExplicit = allowRebaseExplicit;
  }

  public EditRepoOption allowRebaseUpdate(Boolean allowRebaseUpdate) {
    this.allowRebaseUpdate = allowRebaseUpdate;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow updating pull request branch by rebase, or &#x60;false&#x60; to prevent it.
   *
   * @return allowRebaseUpdate
   **/
  @Schema(description = "either `true` to allow updating pull request branch by rebase, or `false` to prevent it.")
  public Boolean isAllowRebaseUpdate() {
    return allowRebaseUpdate;
  }

  public void setAllowRebaseUpdate(Boolean allowRebaseUpdate) {
    this.allowRebaseUpdate = allowRebaseUpdate;
  }

  public EditRepoOption allowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow squash-merging pull requests, or &#x60;false&#x60; to prevent squash-merging.
   *
   * @return allowSquashMerge
   **/
  @Schema(description = "either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.")
  public Boolean isAllowSquashMerge() {
    return allowSquashMerge;
  }

  public void setAllowSquashMerge(Boolean allowSquashMerge) {
    this.allowSquashMerge = allowSquashMerge;
  }

  public EditRepoOption archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * set to &#x60;true&#x60; to archive this repository.
   *
   * @return archived
   **/
  @Schema(description = "set to `true` to archive this repository.")
  public Boolean isArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }

  public EditRepoOption autodetectManualMerge(Boolean autodetectManualMerge) {
    this.autodetectManualMerge = autodetectManualMerge;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable AutodetectManualMerge, or &#x60;false&#x60; to prevent it. Note: In some special cases, misjudgments can occur.
   *
   * @return autodetectManualMerge
   **/
  @Schema(description = "either `true` to enable AutodetectManualMerge, or `false` to prevent it. Note: In some special cases, misjudgments can occur.")
  public Boolean isAutodetectManualMerge() {
    return autodetectManualMerge;
  }

  public void setAutodetectManualMerge(Boolean autodetectManualMerge) {
    this.autodetectManualMerge = autodetectManualMerge;
  }

  public EditRepoOption defaultAllowMaintainerEdit(Boolean defaultAllowMaintainerEdit) {
    this.defaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
    return this;
  }

  /**
   * set to &#x60;true&#x60; to allow edits from maintainers by default
   *
   * @return defaultAllowMaintainerEdit
   **/
  @Schema(description = "set to `true` to allow edits from maintainers by default")
  public Boolean isDefaultAllowMaintainerEdit() {
    return defaultAllowMaintainerEdit;
  }

  public void setDefaultAllowMaintainerEdit(Boolean defaultAllowMaintainerEdit) {
    this.defaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
  }

  public EditRepoOption defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * sets the default branch for this repository.
   *
   * @return defaultBranch
   **/
  @Schema(description = "sets the default branch for this repository.")
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }

  public EditRepoOption defaultDeleteBranchAfterMerge(Boolean defaultDeleteBranchAfterMerge) {
    this.defaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
    return this;
  }

  /**
   * set to &#x60;true&#x60; to delete pr branch after merge by default
   *
   * @return defaultDeleteBranchAfterMerge
   **/
  @Schema(description = "set to `true` to delete pr branch after merge by default")
  public Boolean isDefaultDeleteBranchAfterMerge() {
    return defaultDeleteBranchAfterMerge;
  }

  public void setDefaultDeleteBranchAfterMerge(Boolean defaultDeleteBranchAfterMerge) {
    this.defaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
  }

  public EditRepoOption defaultMergeStyle(String defaultMergeStyle) {
    this.defaultMergeStyle = defaultMergeStyle;
    return this;
  }

  /**
   * set to a merge style to be used by this repository: \&quot;merge\&quot;, \&quot;rebase\&quot;, \&quot;rebase-merge\&quot;, \&quot;squash\&quot;, or \&quot;fast-forward-only\&quot;.
   *
   * @return defaultMergeStyle
   **/
  @Schema(description = "set to a merge style to be used by this repository: \"merge\", \"rebase\", \"rebase-merge\", \"squash\", or \"fast-forward-only\".")
  public String getDefaultMergeStyle() {
    return defaultMergeStyle;
  }

  public void setDefaultMergeStyle(String defaultMergeStyle) {
    this.defaultMergeStyle = defaultMergeStyle;
  }

  public EditRepoOption description(String description) {
    this.description = description;
    return this;
  }

  /**
   * a short description of the repository.
   *
   * @return description
   **/
  @Schema(description = "a short description of the repository.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EditRepoOption enablePrune(Boolean enablePrune) {
    this.enablePrune = enablePrune;
    return this;
  }

  /**
   * enable prune - remove obsolete remote-tracking references when mirroring
   *
   * @return enablePrune
   **/
  @Schema(description = "enable prune - remove obsolete remote-tracking references when mirroring")
  public Boolean isEnablePrune() {
    return enablePrune;
  }

  public void setEnablePrune(Boolean enablePrune) {
    this.enablePrune = enablePrune;
  }

  public EditRepoOption externalTracker(ExternalTracker externalTracker) {
    this.externalTracker = externalTracker;
    return this;
  }

  /**
   * Get externalTracker
   *
   * @return externalTracker
   **/
  @Schema(description = "")
  public ExternalTracker getExternalTracker() {
    return externalTracker;
  }

  public void setExternalTracker(ExternalTracker externalTracker) {
    this.externalTracker = externalTracker;
  }

  public EditRepoOption externalWiki(ExternalWiki externalWiki) {
    this.externalWiki = externalWiki;
    return this;
  }

  /**
   * Get externalWiki
   *
   * @return externalWiki
   **/
  @Schema(description = "")
  public ExternalWiki getExternalWiki() {
    return externalWiki;
  }

  public void setExternalWiki(ExternalWiki externalWiki) {
    this.externalWiki = externalWiki;
  }

  public EditRepoOption hasActions(Boolean hasActions) {
    this.hasActions = hasActions;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable actions unit, or &#x60;false&#x60; to disable them.
   *
   * @return hasActions
   **/
  @Schema(description = "either `true` to enable actions unit, or `false` to disable them.")
  public Boolean isHasActions() {
    return hasActions;
  }

  public void setHasActions(Boolean hasActions) {
    this.hasActions = hasActions;
  }

  public EditRepoOption hasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable issues for this repository or &#x60;false&#x60; to disable them.
   *
   * @return hasIssues
   **/
  @Schema(description = "either `true` to enable issues for this repository or `false` to disable them.")
  public Boolean isHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }

  public EditRepoOption hasPackages(Boolean hasPackages) {
    this.hasPackages = hasPackages;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable packages unit, or &#x60;false&#x60; to disable them.
   *
   * @return hasPackages
   **/
  @Schema(description = "either `true` to enable packages unit, or `false` to disable them.")
  public Boolean isHasPackages() {
    return hasPackages;
  }

  public void setHasPackages(Boolean hasPackages) {
    this.hasPackages = hasPackages;
  }

  public EditRepoOption hasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable project unit, or &#x60;false&#x60; to disable them.
   *
   * @return hasProjects
   **/
  @Schema(description = "either `true` to enable project unit, or `false` to disable them.")
  public Boolean isHasProjects() {
    return hasProjects;
  }

  public void setHasProjects(Boolean hasProjects) {
    this.hasProjects = hasProjects;
  }

  public EditRepoOption hasPullRequests(Boolean hasPullRequests) {
    this.hasPullRequests = hasPullRequests;
    return this;
  }

  /**
   * either &#x60;true&#x60; to allow pull requests, or &#x60;false&#x60; to prevent pull request.
   *
   * @return hasPullRequests
   **/
  @Schema(description = "either `true` to allow pull requests, or `false` to prevent pull request.")
  public Boolean isHasPullRequests() {
    return hasPullRequests;
  }

  public void setHasPullRequests(Boolean hasPullRequests) {
    this.hasPullRequests = hasPullRequests;
  }

  public EditRepoOption hasReleases(Boolean hasReleases) {
    this.hasReleases = hasReleases;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable releases unit, or &#x60;false&#x60; to disable them.
   *
   * @return hasReleases
   **/
  @Schema(description = "either `true` to enable releases unit, or `false` to disable them.")
  public Boolean isHasReleases() {
    return hasReleases;
  }

  public void setHasReleases(Boolean hasReleases) {
    this.hasReleases = hasReleases;
  }

  public EditRepoOption hasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
    return this;
  }

  /**
   * either &#x60;true&#x60; to enable the wiki for this repository or &#x60;false&#x60; to disable it.
   *
   * @return hasWiki
   **/
  @Schema(description = "either `true` to enable the wiki for this repository or `false` to disable it.")
  public Boolean isHasWiki() {
    return hasWiki;
  }

  public void setHasWiki(Boolean hasWiki) {
    this.hasWiki = hasWiki;
  }

  public EditRepoOption ignoreWhitespaceConflicts(Boolean ignoreWhitespaceConflicts) {
    this.ignoreWhitespaceConflicts = ignoreWhitespaceConflicts;
    return this;
  }

  /**
   * either &#x60;true&#x60; to ignore whitespace for conflicts, or &#x60;false&#x60; to not ignore whitespace.
   *
   * @return ignoreWhitespaceConflicts
   **/
  @Schema(description = "either `true` to ignore whitespace for conflicts, or `false` to not ignore whitespace.")
  public Boolean isIgnoreWhitespaceConflicts() {
    return ignoreWhitespaceConflicts;
  }

  public void setIgnoreWhitespaceConflicts(Boolean ignoreWhitespaceConflicts) {
    this.ignoreWhitespaceConflicts = ignoreWhitespaceConflicts;
  }

  public EditRepoOption internalTracker(InternalTracker internalTracker) {
    this.internalTracker = internalTracker;
    return this;
  }

  /**
   * Get internalTracker
   *
   * @return internalTracker
   **/
  @Schema(description = "")
  public InternalTracker getInternalTracker() {
    return internalTracker;
  }

  public void setInternalTracker(InternalTracker internalTracker) {
    this.internalTracker = internalTracker;
  }

  public EditRepoOption mirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
    return this;
  }

  /**
   * set to a string like &#x60;8h30m0s&#x60; to set the mirror interval time
   *
   * @return mirrorInterval
   **/
  @Schema(description = "set to a string like `8h30m0s` to set the mirror interval time")
  public String getMirrorInterval() {
    return mirrorInterval;
  }

  public void setMirrorInterval(String mirrorInterval) {
    this.mirrorInterval = mirrorInterval;
  }

  public EditRepoOption name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the repository
   *
   * @return name
   **/
  @Schema(description = "name of the repository")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public EditRepoOption _private(Boolean _private) {
    this._private = _private;
    return this;
  }

  /**
   * either &#x60;true&#x60; to make the repository private or &#x60;false&#x60; to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.
   *
   * @return _private
   **/
  @Schema(description = "either `true` to make the repository private or `false` to make it public. Note: you will get a 422 error if the organization restricts changing repository visibility to organization owners and a non-owner tries to change the value of private.")
  public Boolean isPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }

  public EditRepoOption projectsMode(String projectsMode) {
    this.projectsMode = projectsMode;
    return this;
  }

  /**
   * &#x60;repo&#x60; to only allow repo-level projects, &#x60;owner&#x60; to only allow owner projects, &#x60;all&#x60; to allow both.
   *
   * @return projectsMode
   **/
  @Schema(description = "`repo` to only allow repo-level projects, `owner` to only allow owner projects, `all` to allow both.")
  public String getProjectsMode() {
    return projectsMode;
  }

  public void setProjectsMode(String projectsMode) {
    this.projectsMode = projectsMode;
  }

  public EditRepoOption template(Boolean template) {
    this.template = template;
    return this;
  }

  /**
   * either &#x60;true&#x60; to make this repository a template or &#x60;false&#x60; to make it a normal repository
   *
   * @return template
   **/
  @Schema(description = "either `true` to make this repository a template or `false` to make it a normal repository")
  public Boolean isTemplate() {
    return template;
  }

  public void setTemplate(Boolean template) {
    this.template = template;
  }

  public EditRepoOption website(String website) {
    this.website = website;
    return this;
  }

  /**
   * a URL with more information about the repository.
   *
   * @return website
   **/
  @Schema(description = "a URL with more information about the repository.")
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditRepoOption editRepoOption = (EditRepoOption) o;
    return Objects.equals(this.allowFastForwardOnlyMerge, editRepoOption.allowFastForwardOnlyMerge) &&
           Objects.equals(this.allowManualMerge, editRepoOption.allowManualMerge) &&
           Objects.equals(this.allowMergeCommits, editRepoOption.allowMergeCommits) &&
           Objects.equals(this.allowRebase, editRepoOption.allowRebase) &&
           Objects.equals(this.allowRebaseExplicit, editRepoOption.allowRebaseExplicit) &&
           Objects.equals(this.allowRebaseUpdate, editRepoOption.allowRebaseUpdate) &&
           Objects.equals(this.allowSquashMerge, editRepoOption.allowSquashMerge) &&
           Objects.equals(this.archived, editRepoOption.archived) &&
           Objects.equals(this.autodetectManualMerge, editRepoOption.autodetectManualMerge) &&
           Objects.equals(this.defaultAllowMaintainerEdit, editRepoOption.defaultAllowMaintainerEdit) &&
           Objects.equals(this.defaultBranch, editRepoOption.defaultBranch) &&
           Objects.equals(this.defaultDeleteBranchAfterMerge, editRepoOption.defaultDeleteBranchAfterMerge) &&
           Objects.equals(this.defaultMergeStyle, editRepoOption.defaultMergeStyle) &&
           Objects.equals(this.description, editRepoOption.description) &&
           Objects.equals(this.enablePrune, editRepoOption.enablePrune) &&
           Objects.equals(this.externalTracker, editRepoOption.externalTracker) &&
           Objects.equals(this.externalWiki, editRepoOption.externalWiki) &&
           Objects.equals(this.hasActions, editRepoOption.hasActions) &&
           Objects.equals(this.hasIssues, editRepoOption.hasIssues) &&
           Objects.equals(this.hasPackages, editRepoOption.hasPackages) &&
           Objects.equals(this.hasProjects, editRepoOption.hasProjects) &&
           Objects.equals(this.hasPullRequests, editRepoOption.hasPullRequests) &&
           Objects.equals(this.hasReleases, editRepoOption.hasReleases) &&
           Objects.equals(this.hasWiki, editRepoOption.hasWiki) &&
           Objects.equals(this.ignoreWhitespaceConflicts, editRepoOption.ignoreWhitespaceConflicts) &&
           Objects.equals(this.internalTracker, editRepoOption.internalTracker) &&
           Objects.equals(this.mirrorInterval, editRepoOption.mirrorInterval) &&
           Objects.equals(this.name, editRepoOption.name) &&
           Objects.equals(this._private, editRepoOption._private) &&
           Objects.equals(this.projectsMode, editRepoOption.projectsMode) &&
           Objects.equals(this.template, editRepoOption.template) &&
           Objects.equals(this.website, editRepoOption.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowFastForwardOnlyMerge, allowManualMerge, allowMergeCommits, allowRebase, allowRebaseExplicit, allowRebaseUpdate, allowSquashMerge, archived, autodetectManualMerge, defaultAllowMaintainerEdit, defaultBranch, defaultDeleteBranchAfterMerge, defaultMergeStyle, description, enablePrune, externalTracker, externalWiki, hasActions, hasIssues, hasPackages, hasProjects, hasPullRequests, hasReleases, hasWiki, ignoreWhitespaceConflicts, internalTracker, mirrorInterval, name, _private, projectsMode, template, website);
  }


  @Override
  public String toString() {

    String sb = "class EditRepoOption {\n" +
                "    allowFastForwardOnlyMerge: " + toIndentedString(allowFastForwardOnlyMerge) + "\n" +
                "    allowManualMerge: " + toIndentedString(allowManualMerge) + "\n" +
                "    allowMergeCommits: " + toIndentedString(allowMergeCommits) + "\n" +
                "    allowRebase: " + toIndentedString(allowRebase) + "\n" +
                "    allowRebaseExplicit: " + toIndentedString(allowRebaseExplicit) + "\n" +
                "    allowRebaseUpdate: " + toIndentedString(allowRebaseUpdate) + "\n" +
                "    allowSquashMerge: " + toIndentedString(allowSquashMerge) + "\n" +
                "    archived: " + toIndentedString(archived) + "\n" +
                "    autodetectManualMerge: " + toIndentedString(autodetectManualMerge) + "\n" +
                "    defaultAllowMaintainerEdit: " + toIndentedString(defaultAllowMaintainerEdit) + "\n" +
                "    defaultBranch: " + toIndentedString(defaultBranch) + "\n" +
                "    defaultDeleteBranchAfterMerge: " + toIndentedString(defaultDeleteBranchAfterMerge) + "\n" +
                "    defaultMergeStyle: " + toIndentedString(defaultMergeStyle) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    enablePrune: " + toIndentedString(enablePrune) + "\n" +
                "    externalTracker: " + toIndentedString(externalTracker) + "\n" +
                "    externalWiki: " + toIndentedString(externalWiki) + "\n" +
                "    hasActions: " + toIndentedString(hasActions) + "\n" +
                "    hasIssues: " + toIndentedString(hasIssues) + "\n" +
                "    hasPackages: " + toIndentedString(hasPackages) + "\n" +
                "    hasProjects: " + toIndentedString(hasProjects) + "\n" +
                "    hasPullRequests: " + toIndentedString(hasPullRequests) + "\n" +
                "    hasReleases: " + toIndentedString(hasReleases) + "\n" +
                "    hasWiki: " + toIndentedString(hasWiki) + "\n" +
                "    ignoreWhitespaceConflicts: " + toIndentedString(ignoreWhitespaceConflicts) + "\n" +
                "    internalTracker: " + toIndentedString(internalTracker) + "\n" +
                "    mirrorInterval: " + toIndentedString(mirrorInterval) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    _private: " + toIndentedString(_private) + "\n" +
                "    projectsMode: " + toIndentedString(projectsMode) + "\n" +
                "    template: " + toIndentedString(template) + "\n" +
                "    website: " + toIndentedString(website) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
