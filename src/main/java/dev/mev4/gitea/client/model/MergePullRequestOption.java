/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;

/**
 * MergePullRequestForm form for merging Pull Request
 */
@Schema(description = "MergePullRequestForm form for merging Pull Request")
public class MergePullRequestOption {
  @SerializedName("Do")
  private DoEnum _do;
  @SerializedName("MergeCommitID")
  private String mergeCommitID;
  @SerializedName("MergeMessageField")
  private String mergeMessageField;
  @SerializedName("MergeTitleField")
  private String mergeTitleField;
  @SerializedName("delete_branch_after_merge")
  private Boolean deleteBranchAfterMerge;
  @SerializedName("force_merge")
  private Boolean forceMerge;
  @SerializedName("head_commit_id")
  private String headCommitId;
  @SerializedName("merge_when_checks_succeed")
  private Boolean mergeWhenChecksSucceed;

  /**
   * Gets or Sets _do
   */
  @JsonAdapter(DoEnum.Adapter.class)
  public enum DoEnum {
    @SerializedName("merge")
    MERGE("merge"),
    @SerializedName("rebase")
    REBASE("rebase"),
    @SerializedName("rebase-merge")
    REBASE_MERGE("rebase-merge"),
    @SerializedName("squash")
    SQUASH("squash"),
    @SerializedName("fast-forward-only")
    FAST_FORWARD_ONLY("fast-forward-only"),
    @SerializedName("manually-merged")
    MANUALLY_MERGED("manually-merged");

    private final String value;

    DoEnum(String value) {
      this.value = value;
    }

    public static class Adapter extends TypeAdapter<DoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DoEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public DoEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return DoEnum.fromValue((String) (value));
      }
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DoEnum fromValue(String input) {
      for (DoEnum b : DoEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }

  public MergePullRequestOption _do(DoEnum _do) {
    this._do = _do;
    return this;
  }

  /**
   * Get _do
   *
   * @return _do
   **/
  @Schema(required = true, description = "")
  public DoEnum getDo() {
    return _do;
  }

  public void setDo(DoEnum _do) {
    this._do = _do;
  }

  public MergePullRequestOption mergeCommitID(String mergeCommitID) {
    this.mergeCommitID = mergeCommitID;
    return this;
  }

  /**
   * Get mergeCommitID
   *
   * @return mergeCommitID
   **/
  @Schema(description = "")
  public String getMergeCommitID() {
    return mergeCommitID;
  }

  public void setMergeCommitID(String mergeCommitID) {
    this.mergeCommitID = mergeCommitID;
  }

  public MergePullRequestOption mergeMessageField(String mergeMessageField) {
    this.mergeMessageField = mergeMessageField;
    return this;
  }

  /**
   * Get mergeMessageField
   *
   * @return mergeMessageField
   **/
  @Schema(description = "")
  public String getMergeMessageField() {
    return mergeMessageField;
  }

  public void setMergeMessageField(String mergeMessageField) {
    this.mergeMessageField = mergeMessageField;
  }

  public MergePullRequestOption mergeTitleField(String mergeTitleField) {
    this.mergeTitleField = mergeTitleField;
    return this;
  }

  /**
   * Get mergeTitleField
   *
   * @return mergeTitleField
   **/
  @Schema(description = "")
  public String getMergeTitleField() {
    return mergeTitleField;
  }

  public void setMergeTitleField(String mergeTitleField) {
    this.mergeTitleField = mergeTitleField;
  }

  public MergePullRequestOption deleteBranchAfterMerge(Boolean deleteBranchAfterMerge) {
    this.deleteBranchAfterMerge = deleteBranchAfterMerge;
    return this;
  }

  /**
   * Get deleteBranchAfterMerge
   *
   * @return deleteBranchAfterMerge
   **/
  @Schema(description = "")
  public Boolean isDeleteBranchAfterMerge() {
    return deleteBranchAfterMerge;
  }

  public void setDeleteBranchAfterMerge(Boolean deleteBranchAfterMerge) {
    this.deleteBranchAfterMerge = deleteBranchAfterMerge;
  }

  public MergePullRequestOption forceMerge(Boolean forceMerge) {
    this.forceMerge = forceMerge;
    return this;
  }

  /**
   * Get forceMerge
   *
   * @return forceMerge
   **/
  @Schema(description = "")
  public Boolean isForceMerge() {
    return forceMerge;
  }

  public void setForceMerge(Boolean forceMerge) {
    this.forceMerge = forceMerge;
  }

  public MergePullRequestOption headCommitId(String headCommitId) {
    this.headCommitId = headCommitId;
    return this;
  }

  /**
   * Get headCommitId
   *
   * @return headCommitId
   **/
  @Schema(description = "")
  public String getHeadCommitId() {
    return headCommitId;
  }

  public void setHeadCommitId(String headCommitId) {
    this.headCommitId = headCommitId;
  }

  public MergePullRequestOption mergeWhenChecksSucceed(Boolean mergeWhenChecksSucceed) {
    this.mergeWhenChecksSucceed = mergeWhenChecksSucceed;
    return this;
  }

  /**
   * Get mergeWhenChecksSucceed
   *
   * @return mergeWhenChecksSucceed
   **/
  @Schema(description = "")
  public Boolean isMergeWhenChecksSucceed() {
    return mergeWhenChecksSucceed;
  }

  public void setMergeWhenChecksSucceed(Boolean mergeWhenChecksSucceed) {
    this.mergeWhenChecksSucceed = mergeWhenChecksSucceed;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergePullRequestOption mergePullRequestOption = (MergePullRequestOption) o;
    return this._do == mergePullRequestOption._do &&
           Objects.equals(this.mergeCommitID, mergePullRequestOption.mergeCommitID) &&
           Objects.equals(this.mergeMessageField, mergePullRequestOption.mergeMessageField) &&
           Objects.equals(this.mergeTitleField, mergePullRequestOption.mergeTitleField) &&
           Objects.equals(this.deleteBranchAfterMerge, mergePullRequestOption.deleteBranchAfterMerge) &&
           Objects.equals(this.forceMerge, mergePullRequestOption.forceMerge) &&
           Objects.equals(this.headCommitId, mergePullRequestOption.headCommitId) &&
           Objects.equals(this.mergeWhenChecksSucceed, mergePullRequestOption.mergeWhenChecksSucceed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_do, mergeCommitID, mergeMessageField, mergeTitleField, deleteBranchAfterMerge, forceMerge, headCommitId, mergeWhenChecksSucceed);
  }


  @Override
  public String toString() {

    String sb = "class MergePullRequestOption {\n" +
                "    _do: " + toIndentedString(_do) + "\n" +
                "    mergeCommitID: " + toIndentedString(mergeCommitID) + "\n" +
                "    mergeMessageField: " + toIndentedString(mergeMessageField) + "\n" +
                "    mergeTitleField: " + toIndentedString(mergeTitleField) + "\n" +
                "    deleteBranchAfterMerge: " + toIndentedString(deleteBranchAfterMerge) + "\n" +
                "    forceMerge: " + toIndentedString(forceMerge) + "\n" +
                "    headCommitId: " + toIndentedString(headCommitId) + "\n" +
                "    mergeWhenChecksSucceed: " + toIndentedString(mergeWhenChecksSucceed) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
