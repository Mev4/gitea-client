/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

/**
 * NotificationThread expose Notification on API
 */
@Schema(description = "NotificationThread expose Notification on API")
public class NotificationThread {
  @SerializedName("id")
  private Long id;

  @SerializedName("pinned")
  private Boolean pinned;

  @SerializedName("repository")
  private Repository repository;

  @SerializedName("subject")
  private NotificationSubject subject;

  @SerializedName("unread")
  private Boolean unread;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt;

  @SerializedName("url")
  private String url;

  public NotificationThread id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public NotificationThread pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Get pinned
   *
   * @return pinned
   **/
  @Schema(description = "")
  public Boolean isPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }

  public NotificationThread repository(Repository repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Get repository
   *
   * @return repository
   **/
  @Schema(description = "")
  public Repository getRepository() {
    return repository;
  }

  public void setRepository(Repository repository) {
    this.repository = repository;
  }

  public NotificationThread subject(NotificationSubject subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   *
   * @return subject
   **/
  @Schema(description = "")
  public NotificationSubject getSubject() {
    return subject;
  }

  public void setSubject(NotificationSubject subject) {
    this.subject = subject;
  }

  public NotificationThread unread(Boolean unread) {
    this.unread = unread;
    return this;
  }

  /**
   * Get unread
   *
   * @return unread
   **/
  @Schema(description = "")
  public Boolean isUnread() {
    return unread;
  }

  public void setUnread(Boolean unread) {
    this.unread = unread;
  }

  public NotificationThread updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   *
   * @return updatedAt
   **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public NotificationThread url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   *
   * @return url
   **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationThread notificationThread = (NotificationThread) o;
    return Objects.equals(this.id, notificationThread.id) &&
           Objects.equals(this.pinned, notificationThread.pinned) &&
           Objects.equals(this.repository, notificationThread.repository) &&
           Objects.equals(this.subject, notificationThread.subject) &&
           Objects.equals(this.unread, notificationThread.unread) &&
           Objects.equals(this.updatedAt, notificationThread.updatedAt) &&
           Objects.equals(this.url, notificationThread.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, pinned, repository, subject, unread, updatedAt, url);
  }


  @Override
  public String toString() {

    String sb = "class NotificationThread {\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    pinned: " + toIndentedString(pinned) + "\n" +
                "    repository: " + toIndentedString(repository) + "\n" +
                "    subject: " + toIndentedString(subject) + "\n" +
                "    unread: " + toIndentedString(unread) + "\n" +
                "    updatedAt: " + toIndentedString(updatedAt) + "\n" +
                "    url: " + toIndentedString(url) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
