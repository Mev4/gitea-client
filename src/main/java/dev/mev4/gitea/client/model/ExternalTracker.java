/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * ExternalTracker represents settings for external tracker
 */
@Schema(description = "ExternalTracker represents settings for external tracker")
public class ExternalTracker {
  @SerializedName("external_tracker_format")
  private String externalTrackerFormat;

  @SerializedName("external_tracker_regexp_pattern")
  private String externalTrackerRegexpPattern;

  @SerializedName("external_tracker_style")
  private String externalTrackerStyle;

  @SerializedName("external_tracker_url")
  private String externalTrackerUrl;

  public ExternalTracker externalTrackerFormat(String externalTrackerFormat) {
    this.externalTrackerFormat = externalTrackerFormat;
    return this;
  }

  /**
   * External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.
   *
   * @return externalTrackerFormat
   **/
  @Schema(description = "External Issue Tracker URL Format. Use the placeholders {user}, {repo} and {index} for the username, repository name and issue index.")
  public String getExternalTrackerFormat() {
    return externalTrackerFormat;
  }

  public void setExternalTrackerFormat(String externalTrackerFormat) {
    this.externalTrackerFormat = externalTrackerFormat;
  }

  public ExternalTracker externalTrackerRegexpPattern(String externalTrackerRegexpPattern) {
    this.externalTrackerRegexpPattern = externalTrackerRegexpPattern;
    return this;
  }

  /**
   * External Issue Tracker issue regular expression
   *
   * @return externalTrackerRegexpPattern
   **/
  @Schema(description = "External Issue Tracker issue regular expression")
  public String getExternalTrackerRegexpPattern() {
    return externalTrackerRegexpPattern;
  }

  public void setExternalTrackerRegexpPattern(String externalTrackerRegexpPattern) {
    this.externalTrackerRegexpPattern = externalTrackerRegexpPattern;
  }

  public ExternalTracker externalTrackerStyle(String externalTrackerStyle) {
    this.externalTrackerStyle = externalTrackerStyle;
    return this;
  }

  /**
   * External Issue Tracker Number Format, either &#x60;numeric&#x60;, &#x60;alphanumeric&#x60;, or &#x60;regexp&#x60;
   *
   * @return externalTrackerStyle
   **/
  @Schema(description = "External Issue Tracker Number Format, either `numeric`, `alphanumeric`, or `regexp`")
  public String getExternalTrackerStyle() {
    return externalTrackerStyle;
  }

  public void setExternalTrackerStyle(String externalTrackerStyle) {
    this.externalTrackerStyle = externalTrackerStyle;
  }

  public ExternalTracker externalTrackerUrl(String externalTrackerUrl) {
    this.externalTrackerUrl = externalTrackerUrl;
    return this;
  }

  /**
   * URL of external issue tracker.
   *
   * @return externalTrackerUrl
   **/
  @Schema(description = "URL of external issue tracker.")
  public String getExternalTrackerUrl() {
    return externalTrackerUrl;
  }

  public void setExternalTrackerUrl(String externalTrackerUrl) {
    this.externalTrackerUrl = externalTrackerUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTracker externalTracker = (ExternalTracker) o;
    return Objects.equals(this.externalTrackerFormat, externalTracker.externalTrackerFormat) &&
           Objects.equals(this.externalTrackerRegexpPattern, externalTracker.externalTrackerRegexpPattern) &&
           Objects.equals(this.externalTrackerStyle, externalTracker.externalTrackerStyle) &&
           Objects.equals(this.externalTrackerUrl, externalTracker.externalTrackerUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalTrackerFormat, externalTrackerRegexpPattern, externalTrackerStyle, externalTrackerUrl);
  }


  @Override
  public String toString() {

    String sb = "class ExternalTracker {\n" +
                "    externalTrackerFormat: " + toIndentedString(externalTrackerFormat) + "\n" +
                "    externalTrackerRegexpPattern: " + toIndentedString(externalTrackerRegexpPattern) + "\n" +
                "    externalTrackerStyle: " + toIndentedString(externalTrackerStyle) + "\n" +
                "    externalTrackerUrl: " + toIndentedString(externalTrackerUrl) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
