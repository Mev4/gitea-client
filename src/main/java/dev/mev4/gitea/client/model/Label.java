/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * Label a label to an issue or a pr
 */
@Schema(description = "Label a label to an issue or a pr")
public class Label {
  @SerializedName("color")
  private String color;

  @SerializedName("description")
  private String description;

  @SerializedName("exclusive")
  private Boolean exclusive;

  @SerializedName("id")
  private Long id;

  @SerializedName("is_archived")
  private Boolean isArchived;

  @SerializedName("name")
  private String name;

  @SerializedName("url")
  private String url;

  public Label color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   *
   * @return color
   **/
  @Schema(example = "00aabb", description = "")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

  public Label description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   *
   * @return description
   **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Label exclusive(Boolean exclusive) {
    this.exclusive = exclusive;
    return this;
  }

  /**
   * Get exclusive
   *
   * @return exclusive
   **/
  @Schema(example = "false", description = "")
  public Boolean isExclusive() {
    return exclusive;
  }

  public void setExclusive(Boolean exclusive) {
    this.exclusive = exclusive;
  }

  public Label id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Label isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   *
   * @return isArchived
   **/
  @Schema(example = "false", description = "")
  public Boolean isIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }

  public Label name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Label url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   *
   * @return url
   **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Label label = (Label) o;
    return Objects.equals(this.color, label.color) &&
           Objects.equals(this.description, label.description) &&
           Objects.equals(this.exclusive, label.exclusive) &&
           Objects.equals(this.id, label.id) &&
           Objects.equals(this.isArchived, label.isArchived) &&
           Objects.equals(this.name, label.name) &&
           Objects.equals(this.url, label.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, description, exclusive, id, isArchived, name, url);
  }


  @Override
  public String toString() {

    String sb = "class Label {\n" +
                "    color: " + toIndentedString(color) + "\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    exclusive: " + toIndentedString(exclusive) + "\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    isArchived: " + toIndentedString(isArchived) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    url: " + toIndentedString(url) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
