/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;

/**
 * Activity
 */

public class Activity {
  @SerializedName("act_user")
  private User actUser;

  @SerializedName("act_user_id")
  private Long actUserId;

  @SerializedName("comment")
  private Comment comment;

  @SerializedName("comment_id")
  private Long commentId;

  @SerializedName("content")
  private String content;

  @SerializedName("created")
  private OffsetDateTime created;

  @SerializedName("id")
  private Long id;

  @SerializedName("is_private")
  private Boolean isPrivate;
  @SerializedName("op_type")
  private OpTypeEnum opType;
  @SerializedName("ref_name")
  private String refName;
  @SerializedName("repo")
  private Repository repo;
  @SerializedName("repo_id")
  private Long repoId;
  @SerializedName("user_id")
  private Long userId;

  /**
   * the type of action
   */
  @JsonAdapter(OpTypeEnum.Adapter.class)
  public enum OpTypeEnum {
    @SerializedName("create_repo")
    CREATE_REPO("create_repo"),
    @SerializedName("rename_repo")
    RENAME_REPO("rename_repo"),
    @SerializedName("star_repo")
    STAR_REPO("star_repo"),
    @SerializedName("watch_repo")
    WATCH_REPO("watch_repo"),
    @SerializedName("commit_repo")
    COMMIT_REPO("commit_repo"),
    @SerializedName("create_issue")
    CREATE_ISSUE("create_issue"),
    @SerializedName("create_pull_request")
    CREATE_PULL_REQUEST("create_pull_request"),
    @SerializedName("transfer_repo")
    TRANSFER_REPO("transfer_repo"),
    @SerializedName("push_tag")
    PUSH_TAG("push_tag"),
    @SerializedName("comment_issue")
    COMMENT_ISSUE("comment_issue"),
    @SerializedName("merge_pull_request")
    MERGE_PULL_REQUEST("merge_pull_request"),
    @SerializedName("close_issue")
    CLOSE_ISSUE("close_issue"),
    @SerializedName("reopen_issue")
    REOPEN_ISSUE("reopen_issue"),
    @SerializedName("close_pull_request")
    CLOSE_PULL_REQUEST("close_pull_request"),
    @SerializedName("reopen_pull_request")
    REOPEN_PULL_REQUEST("reopen_pull_request"),
    @SerializedName("delete_tag")
    DELETE_TAG("delete_tag"),
    @SerializedName("delete_branch")
    DELETE_BRANCH("delete_branch"),
    @SerializedName("mirror_sync_push")
    MIRROR_SYNC_PUSH("mirror_sync_push"),
    @SerializedName("mirror_sync_create")
    MIRROR_SYNC_CREATE("mirror_sync_create"),
    @SerializedName("mirror_sync_delete")
    MIRROR_SYNC_DELETE("mirror_sync_delete"),
    @SerializedName("approve_pull_request")
    APPROVE_PULL_REQUEST("approve_pull_request"),
    @SerializedName("reject_pull_request")
    REJECT_PULL_REQUEST("reject_pull_request"),
    @SerializedName("comment_pull")
    COMMENT_PULL("comment_pull"),
    @SerializedName("publish_release")
    PUBLISH_RELEASE("publish_release"),
    @SerializedName("pull_review_dismissed")
    PULL_REVIEW_DISMISSED("pull_review_dismissed"),
    @SerializedName("pull_request_ready_for_review")
    PULL_REQUEST_READY_FOR_REVIEW("pull_request_ready_for_review"),
    @SerializedName("auto_merge_pull_request")
    AUTO_MERGE_PULL_REQUEST("auto_merge_pull_request");

    private final String value;

    OpTypeEnum(String value) {
      this.value = value;
    }

    public static class Adapter extends TypeAdapter<OpTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OpTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OpTypeEnum.fromValue((String) (value));
      }
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpTypeEnum fromValue(String input) {
      for (OpTypeEnum b : OpTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
  }

  public Activity actUser(User actUser) {
    this.actUser = actUser;
    return this;
  }

  /**
   * Get actUser
   *
   * @return actUser
   **/
  @Schema(description = "")
  public User getActUser() {
    return actUser;
  }

  public void setActUser(User actUser) {
    this.actUser = actUser;
  }

  public Activity actUserId(Long actUserId) {
    this.actUserId = actUserId;
    return this;
  }

  /**
   * Get actUserId
   *
   * @return actUserId
   **/
  @Schema(description = "")
  public Long getActUserId() {
    return actUserId;
  }

  public void setActUserId(Long actUserId) {
    this.actUserId = actUserId;
  }

  public Activity comment(Comment comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   *
   * @return comment
   **/
  @Schema(description = "")
  public Comment getComment() {
    return comment;
  }

  public void setComment(Comment comment) {
    this.comment = comment;
  }

  public Activity commentId(Long commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * Get commentId
   *
   * @return commentId
   **/
  @Schema(description = "")
  public Long getCommentId() {
    return commentId;
  }

  public void setCommentId(Long commentId) {
    this.commentId = commentId;
  }

  public Activity content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   *
   * @return content
   **/
  @Schema(description = "")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public Activity created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   *
   * @return created
   **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public Activity id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Activity isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Get isPrivate
   *
   * @return isPrivate
   **/
  @Schema(description = "")
  public Boolean isIsPrivate() {
    return isPrivate;
  }

  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }

  public Activity opType(OpTypeEnum opType) {
    this.opType = opType;
    return this;
  }

  /**
   * the type of action
   *
   * @return opType
   **/
  @Schema(description = "the type of action")
  public OpTypeEnum getOpType() {
    return opType;
  }

  public void setOpType(OpTypeEnum opType) {
    this.opType = opType;
  }

  public Activity refName(String refName) {
    this.refName = refName;
    return this;
  }

  /**
   * Get refName
   *
   * @return refName
   **/
  @Schema(description = "")
  public String getRefName() {
    return refName;
  }

  public void setRefName(String refName) {
    this.refName = refName;
  }

  public Activity repo(Repository repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Get repo
   *
   * @return repo
   **/
  @Schema(description = "")
  public Repository getRepo() {
    return repo;
  }

  public void setRepo(Repository repo) {
    this.repo = repo;
  }

  public Activity repoId(Long repoId) {
    this.repoId = repoId;
    return this;
  }

  /**
   * Get repoId
   *
   * @return repoId
   **/
  @Schema(description = "")
  public Long getRepoId() {
    return repoId;
  }

  public void setRepoId(Long repoId) {
    this.repoId = repoId;
  }

  public Activity userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   *
   * @return userId
   **/
  @Schema(description = "")
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.actUser, activity.actUser) &&
           Objects.equals(this.actUserId, activity.actUserId) &&
           Objects.equals(this.comment, activity.comment) &&
           Objects.equals(this.commentId, activity.commentId) &&
           Objects.equals(this.content, activity.content) &&
           Objects.equals(this.created, activity.created) &&
           Objects.equals(this.id, activity.id) &&
           Objects.equals(this.isPrivate, activity.isPrivate) &&
           this.opType == activity.opType &&
           Objects.equals(this.refName, activity.refName) &&
           Objects.equals(this.repo, activity.repo) &&
           Objects.equals(this.repoId, activity.repoId) &&
           Objects.equals(this.userId, activity.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actUser, actUserId, comment, commentId, content, created, id, isPrivate, opType, refName, repo, repoId, userId);
  }


  @Override
  public String toString() {

    String sb = "class Activity {\n" +
                "    actUser: " + toIndentedString(actUser) + "\n" +
                "    actUserId: " + toIndentedString(actUserId) + "\n" +
                "    comment: " + toIndentedString(comment) + "\n" +
                "    commentId: " + toIndentedString(commentId) + "\n" +
                "    content: " + toIndentedString(content) + "\n" +
                "    created: " + toIndentedString(created) + "\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    isPrivate: " + toIndentedString(isPrivate) + "\n" +
                "    opType: " + toIndentedString(opType) + "\n" +
                "    refName: " + toIndentedString(refName) + "\n" +
                "    repo: " + toIndentedString(repo) + "\n" +
                "    repoId: " + toIndentedString(repoId) + "\n" +
                "    userId: " + toIndentedString(userId) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
