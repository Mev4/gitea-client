/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * RepoTransfer represents a pending repo transfer
 */
@Schema(description = "RepoTransfer represents a pending repo transfer")
public class RepoTransfer {
  @SerializedName("doer")
  private User doer;

  @SerializedName("recipient")
  private User recipient;

  @SerializedName("teams")
  private List<Team> teams;

  public RepoTransfer doer(User doer) {
    this.doer = doer;
    return this;
  }

  /**
   * Get doer
   *
   * @return doer
   **/
  @Schema(description = "")
  public User getDoer() {
    return doer;
  }

  public void setDoer(User doer) {
    this.doer = doer;
  }

  public RepoTransfer recipient(User recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   *
   * @return recipient
   **/
  @Schema(description = "")
  public User getRecipient() {
    return recipient;
  }

  public void setRecipient(User recipient) {
    this.recipient = recipient;
  }

  public RepoTransfer teams(List<Team> teams) {
    this.teams = teams;
    return this;
  }

  public RepoTransfer addTeamsItem(Team teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<Team>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * Get teams
   *
   * @return teams
   **/
  @Schema(description = "")
  public List<Team> getTeams() {
    return teams;
  }

  public void setTeams(List<Team> teams) {
    this.teams = teams;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepoTransfer repoTransfer = (RepoTransfer) o;
    return Objects.equals(this.doer, repoTransfer.doer) &&
           Objects.equals(this.recipient, repoTransfer.recipient) &&
           Objects.equals(this.teams, repoTransfer.teams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doer, recipient, teams);
  }


  @Override
  public String toString() {

    String sb = "class RepoTransfer {\n" +
                "    doer: " + toIndentedString(doer) + "\n" +
                "    recipient: " + toIndentedString(recipient) + "\n" +
                "    teams: " + toIndentedString(teams) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
