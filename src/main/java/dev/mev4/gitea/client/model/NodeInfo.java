/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks
 */
@Schema(description = "NodeInfo contains standardized way of exposing metadata about a server running one of the distributed social networks")
public class NodeInfo {
  @SerializedName("metadata")
  private Object metadata;

  @SerializedName("openRegistrations")
  private Boolean openRegistrations;

  @SerializedName("protocols")
  private List<String> protocols;

  @SerializedName("services")
  private NodeInfoServices services;

  @SerializedName("software")
  private NodeInfoSoftware software;

  @SerializedName("usage")
  private NodeInfoUsage usage;

  @SerializedName("version")
  private String version;

  public NodeInfo metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   *
   * @return metadata
   **/
  @Schema(description = "")
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }

  public NodeInfo openRegistrations(Boolean openRegistrations) {
    this.openRegistrations = openRegistrations;
    return this;
  }

  /**
   * Get openRegistrations
   *
   * @return openRegistrations
   **/
  @Schema(description = "")
  public Boolean isOpenRegistrations() {
    return openRegistrations;
  }

  public void setOpenRegistrations(Boolean openRegistrations) {
    this.openRegistrations = openRegistrations;
  }

  public NodeInfo protocols(List<String> protocols) {
    this.protocols = protocols;
    return this;
  }

  public NodeInfo addProtocolsItem(String protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<String>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Get protocols
   *
   * @return protocols
   **/
  @Schema(description = "")
  public List<String> getProtocols() {
    return protocols;
  }

  public void setProtocols(List<String> protocols) {
    this.protocols = protocols;
  }

  public NodeInfo services(NodeInfoServices services) {
    this.services = services;
    return this;
  }

  /**
   * Get services
   *
   * @return services
   **/
  @Schema(description = "")
  public NodeInfoServices getServices() {
    return services;
  }

  public void setServices(NodeInfoServices services) {
    this.services = services;
  }

  public NodeInfo software(NodeInfoSoftware software) {
    this.software = software;
    return this;
  }

  /**
   * Get software
   *
   * @return software
   **/
  @Schema(description = "")
  public NodeInfoSoftware getSoftware() {
    return software;
  }

  public void setSoftware(NodeInfoSoftware software) {
    this.software = software;
  }

  public NodeInfo usage(NodeInfoUsage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   *
   * @return usage
   **/
  @Schema(description = "")
  public NodeInfoUsage getUsage() {
    return usage;
  }

  public void setUsage(NodeInfoUsage usage) {
    this.usage = usage;
  }

  public NodeInfo version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   *
   * @return version
   **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfo nodeInfo = (NodeInfo) o;
    return Objects.equals(this.metadata, nodeInfo.metadata) &&
           Objects.equals(this.openRegistrations, nodeInfo.openRegistrations) &&
           Objects.equals(this.protocols, nodeInfo.protocols) &&
           Objects.equals(this.services, nodeInfo.services) &&
           Objects.equals(this.software, nodeInfo.software) &&
           Objects.equals(this.usage, nodeInfo.usage) &&
           Objects.equals(this.version, nodeInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, openRegistrations, protocols, services, software, usage, version);
  }


  @Override
  public String toString() {

    String sb = "class NodeInfo {\n" +
                "    metadata: " + toIndentedString(metadata) + "\n" +
                "    openRegistrations: " + toIndentedString(openRegistrations) + "\n" +
                "    protocols: " + toIndentedString(protocols) + "\n" +
                "    services: " + toIndentedString(services) + "\n" +
                "    software: " + toIndentedString(software) + "\n" +
                "    usage: " + toIndentedString(usage) + "\n" +
                "    version: " + toIndentedString(version) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
