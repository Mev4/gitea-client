/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * ContentsResponse contains information about a repo&#x27;s entry&#x27;s (dir, file, symlink, submodule) metadata and content
 */
@Schema(description = "ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content")
public class ContentsResponse {
  @SerializedName("_links")
  private FileLinksResponse _links;

  @SerializedName("content")
  private String content;

  @SerializedName("download_url")
  private String downloadUrl;

  @SerializedName("encoding")
  private String encoding;

  @SerializedName("git_url")
  private String gitUrl;

  @SerializedName("html_url")
  private String htmlUrl;

  @SerializedName("last_commit_sha")
  private String lastCommitSha;

  @SerializedName("name")
  private String name;

  @SerializedName("path")
  private String path;

  @SerializedName("sha")
  private String sha;

  @SerializedName("size")
  private Long size;

  @SerializedName("submodule_git_url")
  private String submoduleGitUrl;

  @SerializedName("target")
  private String target;

  @SerializedName("type")
  private String type;

  @SerializedName("url")
  private String url;

  public ContentsResponse _links(FileLinksResponse _links) {
    this._links = _links;
    return this;
  }

  /**
   * Get _links
   *
   * @return _links
   **/
  @Schema(description = "")
  public FileLinksResponse getLinks() {
    return _links;
  }

  public void setLinks(FileLinksResponse _links) {
    this._links = _links;
  }

  public ContentsResponse content(String content) {
    this.content = content;
    return this;
  }

  /**
   * &#x60;content&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null
   *
   * @return content
   **/
  @Schema(description = "`content` is populated when `type` is `file`, otherwise null")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public ContentsResponse downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   *
   * @return downloadUrl
   **/
  @Schema(description = "")
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }

  public ContentsResponse encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * &#x60;encoding&#x60; is populated when &#x60;type&#x60; is &#x60;file&#x60;, otherwise null
   *
   * @return encoding
   **/
  @Schema(description = "`encoding` is populated when `type` is `file`, otherwise null")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }

  public ContentsResponse gitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
    return this;
  }

  /**
   * Get gitUrl
   *
   * @return gitUrl
   **/
  @Schema(description = "")
  public String getGitUrl() {
    return gitUrl;
  }

  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }

  public ContentsResponse htmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
    return this;
  }

  /**
   * Get htmlUrl
   *
   * @return htmlUrl
   **/
  @Schema(description = "")
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public void setHtmlUrl(String htmlUrl) {
    this.htmlUrl = htmlUrl;
  }

  public ContentsResponse lastCommitSha(String lastCommitSha) {
    this.lastCommitSha = lastCommitSha;
    return this;
  }

  /**
   * Get lastCommitSha
   *
   * @return lastCommitSha
   **/
  @Schema(description = "")
  public String getLastCommitSha() {
    return lastCommitSha;
  }

  public void setLastCommitSha(String lastCommitSha) {
    this.lastCommitSha = lastCommitSha;
  }

  public ContentsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContentsResponse path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   *
   * @return path
   **/
  @Schema(description = "")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public ContentsResponse sha(String sha) {
    this.sha = sha;
    return this;
  }

  /**
   * Get sha
   *
   * @return sha
   **/
  @Schema(description = "")
  public String getSha() {
    return sha;
  }

  public void setSha(String sha) {
    this.sha = sha;
  }

  public ContentsResponse size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   *
   * @return size
   **/
  @Schema(description = "")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public ContentsResponse submoduleGitUrl(String submoduleGitUrl) {
    this.submoduleGitUrl = submoduleGitUrl;
    return this;
  }

  /**
   * &#x60;submodule_git_url&#x60; is populated when &#x60;type&#x60; is &#x60;submodule&#x60;, otherwise null
   *
   * @return submoduleGitUrl
   **/
  @Schema(description = "`submodule_git_url` is populated when `type` is `submodule`, otherwise null")
  public String getSubmoduleGitUrl() {
    return submoduleGitUrl;
  }

  public void setSubmoduleGitUrl(String submoduleGitUrl) {
    this.submoduleGitUrl = submoduleGitUrl;
  }

  public ContentsResponse target(String target) {
    this.target = target;
    return this;
  }

  /**
   * &#x60;target&#x60; is populated when &#x60;type&#x60; is &#x60;symlink&#x60;, otherwise null
   *
   * @return target
   **/
  @Schema(description = "`target` is populated when `type` is `symlink`, otherwise null")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }

  public ContentsResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * &#x60;type&#x60; will be &#x60;file&#x60;, &#x60;dir&#x60;, &#x60;symlink&#x60;, or &#x60;submodule&#x60;
   *
   * @return type
   **/
  @Schema(description = "`type` will be `file`, `dir`, `symlink`, or `submodule`")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public ContentsResponse url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   *
   * @return url
   **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentsResponse contentsResponse = (ContentsResponse) o;
    return Objects.equals(this._links, contentsResponse._links) &&
           Objects.equals(this.content, contentsResponse.content) &&
           Objects.equals(this.downloadUrl, contentsResponse.downloadUrl) &&
           Objects.equals(this.encoding, contentsResponse.encoding) &&
           Objects.equals(this.gitUrl, contentsResponse.gitUrl) &&
           Objects.equals(this.htmlUrl, contentsResponse.htmlUrl) &&
           Objects.equals(this.lastCommitSha, contentsResponse.lastCommitSha) &&
           Objects.equals(this.name, contentsResponse.name) &&
           Objects.equals(this.path, contentsResponse.path) &&
           Objects.equals(this.sha, contentsResponse.sha) &&
           Objects.equals(this.size, contentsResponse.size) &&
           Objects.equals(this.submoduleGitUrl, contentsResponse.submoduleGitUrl) &&
           Objects.equals(this.target, contentsResponse.target) &&
           Objects.equals(this.type, contentsResponse.type) &&
           Objects.equals(this.url, contentsResponse.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_links, content, downloadUrl, encoding, gitUrl, htmlUrl, lastCommitSha, name, path, sha, size, submoduleGitUrl, target, type, url);
  }


  @Override
  public String toString() {

    String sb = "class ContentsResponse {\n" +
                "    _links: " + toIndentedString(_links) + "\n" +
                "    content: " + toIndentedString(content) + "\n" +
                "    downloadUrl: " + toIndentedString(downloadUrl) + "\n" +
                "    encoding: " + toIndentedString(encoding) + "\n" +
                "    gitUrl: " + toIndentedString(gitUrl) + "\n" +
                "    htmlUrl: " + toIndentedString(htmlUrl) + "\n" +
                "    lastCommitSha: " + toIndentedString(lastCommitSha) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    path: " + toIndentedString(path) + "\n" +
                "    sha: " + toIndentedString(sha) + "\n" +
                "    size: " + toIndentedString(size) + "\n" +
                "    submoduleGitUrl: " + toIndentedString(submoduleGitUrl) + "\n" +
                "    target: " + toIndentedString(target) + "\n" +
                "    type: " + toIndentedString(type) + "\n" +
                "    url: " + toIndentedString(url) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
