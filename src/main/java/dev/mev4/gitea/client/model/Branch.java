/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Branch represents a repository branch
 */
@Schema(description = "Branch represents a repository branch")
public class Branch {
  @SerializedName("commit")
  private PayloadCommit commit;

  @SerializedName("effective_branch_protection_name")
  private String effectiveBranchProtectionName;

  @SerializedName("enable_status_check")
  private Boolean enableStatusCheck;

  @SerializedName("name")
  private String name;

  @SerializedName("protected")
  private Boolean _protected;

  @SerializedName("required_approvals")
  private Long requiredApprovals;

  @SerializedName("status_check_contexts")
  private List<String> statusCheckContexts;

  @SerializedName("user_can_merge")
  private Boolean userCanMerge;

  @SerializedName("user_can_push")
  private Boolean userCanPush;

  public Branch commit(PayloadCommit commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   *
   * @return commit
   **/
  @Schema(description = "")
  public PayloadCommit getCommit() {
    return commit;
  }

  public void setCommit(PayloadCommit commit) {
    this.commit = commit;
  }

  public Branch effectiveBranchProtectionName(String effectiveBranchProtectionName) {
    this.effectiveBranchProtectionName = effectiveBranchProtectionName;
    return this;
  }

  /**
   * Get effectiveBranchProtectionName
   *
   * @return effectiveBranchProtectionName
   **/
  @Schema(description = "")
  public String getEffectiveBranchProtectionName() {
    return effectiveBranchProtectionName;
  }

  public void setEffectiveBranchProtectionName(String effectiveBranchProtectionName) {
    this.effectiveBranchProtectionName = effectiveBranchProtectionName;
  }

  public Branch enableStatusCheck(Boolean enableStatusCheck) {
    this.enableStatusCheck = enableStatusCheck;
    return this;
  }

  /**
   * Get enableStatusCheck
   *
   * @return enableStatusCheck
   **/
  @Schema(description = "")
  public Boolean isEnableStatusCheck() {
    return enableStatusCheck;
  }

  public void setEnableStatusCheck(Boolean enableStatusCheck) {
    this.enableStatusCheck = enableStatusCheck;
  }

  public Branch name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Branch _protected(Boolean _protected) {
    this._protected = _protected;
    return this;
  }

  /**
   * Get _protected
   *
   * @return _protected
   **/
  @Schema(description = "")
  public Boolean isProtected() {
    return _protected;
  }

  public void setProtected(Boolean _protected) {
    this._protected = _protected;
  }

  public Branch requiredApprovals(Long requiredApprovals) {
    this.requiredApprovals = requiredApprovals;
    return this;
  }

  /**
   * Get requiredApprovals
   *
   * @return requiredApprovals
   **/
  @Schema(description = "")
  public Long getRequiredApprovals() {
    return requiredApprovals;
  }

  public void setRequiredApprovals(Long requiredApprovals) {
    this.requiredApprovals = requiredApprovals;
  }

  public Branch statusCheckContexts(List<String> statusCheckContexts) {
    this.statusCheckContexts = statusCheckContexts;
    return this;
  }

  public Branch addStatusCheckContextsItem(String statusCheckContextsItem) {
    if (this.statusCheckContexts == null) {
      this.statusCheckContexts = new ArrayList<String>();
    }
    this.statusCheckContexts.add(statusCheckContextsItem);
    return this;
  }

  /**
   * Get statusCheckContexts
   *
   * @return statusCheckContexts
   **/
  @Schema(description = "")
  public List<String> getStatusCheckContexts() {
    return statusCheckContexts;
  }

  public void setStatusCheckContexts(List<String> statusCheckContexts) {
    this.statusCheckContexts = statusCheckContexts;
  }

  public Branch userCanMerge(Boolean userCanMerge) {
    this.userCanMerge = userCanMerge;
    return this;
  }

  /**
   * Get userCanMerge
   *
   * @return userCanMerge
   **/
  @Schema(description = "")
  public Boolean isUserCanMerge() {
    return userCanMerge;
  }

  public void setUserCanMerge(Boolean userCanMerge) {
    this.userCanMerge = userCanMerge;
  }

  public Branch userCanPush(Boolean userCanPush) {
    this.userCanPush = userCanPush;
    return this;
  }

  /**
   * Get userCanPush
   *
   * @return userCanPush
   **/
  @Schema(description = "")
  public Boolean isUserCanPush() {
    return userCanPush;
  }

  public void setUserCanPush(Boolean userCanPush) {
    this.userCanPush = userCanPush;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Branch branch = (Branch) o;
    return Objects.equals(this.commit, branch.commit) &&
           Objects.equals(this.effectiveBranchProtectionName, branch.effectiveBranchProtectionName) &&
           Objects.equals(this.enableStatusCheck, branch.enableStatusCheck) &&
           Objects.equals(this.name, branch.name) &&
           Objects.equals(this._protected, branch._protected) &&
           Objects.equals(this.requiredApprovals, branch.requiredApprovals) &&
           Objects.equals(this.statusCheckContexts, branch.statusCheckContexts) &&
           Objects.equals(this.userCanMerge, branch.userCanMerge) &&
           Objects.equals(this.userCanPush, branch.userCanPush);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commit, effectiveBranchProtectionName, enableStatusCheck, name, _protected, requiredApprovals, statusCheckContexts, userCanMerge, userCanPush);
  }


  @Override
  public String toString() {

    String sb = "class Branch {\n" +
                "    commit: " + toIndentedString(commit) + "\n" +
                "    effectiveBranchProtectionName: " + toIndentedString(effectiveBranchProtectionName) + "\n" +
                "    enableStatusCheck: " + toIndentedString(enableStatusCheck) + "\n" +
                "    name: " + toIndentedString(name) + "\n" +
                "    _protected: " + toIndentedString(_protected) + "\n" +
                "    requiredApprovals: " + toIndentedString(requiredApprovals) + "\n" +
                "    statusCheckContexts: " + toIndentedString(statusCheckContexts) + "\n" +
                "    userCanMerge: " + toIndentedString(userCanMerge) + "\n" +
                "    userCanPush: " + toIndentedString(userCanPush) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
