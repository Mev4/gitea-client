/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * GeneralAPISettings contains global api settings exposed by it
 */
@Schema(description = "GeneralAPISettings contains global api settings exposed by it")
public class GeneralAPISettings {
  @SerializedName("default_git_trees_per_page")
  private Long defaultGitTreesPerPage;

  @SerializedName("default_max_blob_size")
  private Long defaultMaxBlobSize;

  @SerializedName("default_paging_num")
  private Long defaultPagingNum;

  @SerializedName("max_response_items")
  private Long maxResponseItems;

  public GeneralAPISettings defaultGitTreesPerPage(Long defaultGitTreesPerPage) {
    this.defaultGitTreesPerPage = defaultGitTreesPerPage;
    return this;
  }

  /**
   * Get defaultGitTreesPerPage
   *
   * @return defaultGitTreesPerPage
   **/
  @Schema(description = "")
  public Long getDefaultGitTreesPerPage() {
    return defaultGitTreesPerPage;
  }

  public void setDefaultGitTreesPerPage(Long defaultGitTreesPerPage) {
    this.defaultGitTreesPerPage = defaultGitTreesPerPage;
  }

  public GeneralAPISettings defaultMaxBlobSize(Long defaultMaxBlobSize) {
    this.defaultMaxBlobSize = defaultMaxBlobSize;
    return this;
  }

  /**
   * Get defaultMaxBlobSize
   *
   * @return defaultMaxBlobSize
   **/
  @Schema(description = "")
  public Long getDefaultMaxBlobSize() {
    return defaultMaxBlobSize;
  }

  public void setDefaultMaxBlobSize(Long defaultMaxBlobSize) {
    this.defaultMaxBlobSize = defaultMaxBlobSize;
  }

  public GeneralAPISettings defaultPagingNum(Long defaultPagingNum) {
    this.defaultPagingNum = defaultPagingNum;
    return this;
  }

  /**
   * Get defaultPagingNum
   *
   * @return defaultPagingNum
   **/
  @Schema(description = "")
  public Long getDefaultPagingNum() {
    return defaultPagingNum;
  }

  public void setDefaultPagingNum(Long defaultPagingNum) {
    this.defaultPagingNum = defaultPagingNum;
  }

  public GeneralAPISettings maxResponseItems(Long maxResponseItems) {
    this.maxResponseItems = maxResponseItems;
    return this;
  }

  /**
   * Get maxResponseItems
   *
   * @return maxResponseItems
   **/
  @Schema(description = "")
  public Long getMaxResponseItems() {
    return maxResponseItems;
  }

  public void setMaxResponseItems(Long maxResponseItems) {
    this.maxResponseItems = maxResponseItems;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralAPISettings generalAPISettings = (GeneralAPISettings) o;
    return Objects.equals(this.defaultGitTreesPerPage, generalAPISettings.defaultGitTreesPerPage) &&
           Objects.equals(this.defaultMaxBlobSize, generalAPISettings.defaultMaxBlobSize) &&
           Objects.equals(this.defaultPagingNum, generalAPISettings.defaultPagingNum) &&
           Objects.equals(this.maxResponseItems, generalAPISettings.maxResponseItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultGitTreesPerPage, defaultMaxBlobSize, defaultPagingNum, maxResponseItems);
  }


  @Override
  public String toString() {

    String sb = "class GeneralAPISettings {\n" +
                "    defaultGitTreesPerPage: " + toIndentedString(defaultGitTreesPerPage) + "\n" +
                "    defaultMaxBlobSize: " + toIndentedString(defaultMaxBlobSize) + "\n" +
                "    defaultPagingNum: " + toIndentedString(defaultPagingNum) + "\n" +
                "    maxResponseItems: " + toIndentedString(maxResponseItems) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
