/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * CreatePullReviewOptions are options to create a pull review
 */
@Schema(description = "CreatePullReviewOptions are options to create a pull review")
public class CreatePullReviewOptions {
  @SerializedName("body")
  private String body;

  @SerializedName("comments")
  private List<CreatePullReviewComment> comments;

  @SerializedName("commit_id")
  private String commitId;

  @SerializedName("event")
  private String event;

  public CreatePullReviewOptions body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   *
   * @return body
   **/
  @Schema(description = "")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public CreatePullReviewOptions comments(List<CreatePullReviewComment> comments) {
    this.comments = comments;
    return this;
  }

  public CreatePullReviewOptions addCommentsItem(CreatePullReviewComment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<CreatePullReviewComment>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Get comments
   *
   * @return comments
   **/
  @Schema(description = "")
  public List<CreatePullReviewComment> getComments() {
    return comments;
  }

  public void setComments(List<CreatePullReviewComment> comments) {
    this.comments = comments;
  }

  public CreatePullReviewOptions commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * Get commitId
   *
   * @return commitId
   **/
  @Schema(description = "")
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }

  public CreatePullReviewOptions event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   *
   * @return event
   **/
  @Schema(description = "")
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePullReviewOptions createPullReviewOptions = (CreatePullReviewOptions) o;
    return Objects.equals(this.body, createPullReviewOptions.body) &&
           Objects.equals(this.comments, createPullReviewOptions.comments) &&
           Objects.equals(this.commitId, createPullReviewOptions.commitId) &&
           Objects.equals(this.event, createPullReviewOptions.event);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, comments, commitId, event);
  }


  @Override
  public String toString() {

    String sb = "class CreatePullReviewOptions {\n" +
                "    body: " + toIndentedString(body) + "\n" +
                "    comments: " + toIndentedString(comments) + "\n" +
                "    commitId: " + toIndentedString(commitId) + "\n" +
                "    event: " + toIndentedString(event) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
