/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Hook a hook is a web hook when one repository changed
 */
@Schema(description = "Hook a hook is a web hook when one repository changed")
public class Hook {
  @SerializedName("active")
  private Boolean active;

  @SerializedName("authorization_header")
  private String authorizationHeader;

  @SerializedName("branch_filter")
  private String branchFilter;

  @SerializedName("config")
  private Map<String, String> config;

  @SerializedName("created_at")
  private OffsetDateTime createdAt;

  @SerializedName("events")
  private List<String> events;

  @SerializedName("id")
  private Long id;

  @SerializedName("type")
  private String type;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt;

  public Hook active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   *
   * @return active
   **/
  @Schema(description = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Hook authorizationHeader(String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
    return this;
  }

  /**
   * Get authorizationHeader
   *
   * @return authorizationHeader
   **/
  @Schema(description = "")
  public String getAuthorizationHeader() {
    return authorizationHeader;
  }

  public void setAuthorizationHeader(String authorizationHeader) {
    this.authorizationHeader = authorizationHeader;
  }

  public Hook branchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
    return this;
  }

  /**
   * Get branchFilter
   *
   * @return branchFilter
   **/
  @Schema(description = "")
  public String getBranchFilter() {
    return branchFilter;
  }

  public void setBranchFilter(String branchFilter) {
    this.branchFilter = branchFilter;
  }

  public Hook config(Map<String, String> config) {
    this.config = config;
    return this;
  }

  public Hook putConfigItem(String key, String configItem) {
    if (this.config == null) {
      this.config = new HashMap<String, String>();
    }
    this.config.put(key, configItem);
    return this;
  }

  /**
   * Get config
   *
   * @return config
   **/
  @Schema(description = "")
  public Map<String, String> getConfig() {
    return config;
  }

  public void setConfig(Map<String, String> config) {
    this.config = config;
  }

  public Hook createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   *
   * @return createdAt
   **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Hook events(List<String> events) {
    this.events = events;
    return this;
  }

  public Hook addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<String>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Get events
   *
   * @return events
   **/
  @Schema(description = "")
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }

  public Hook id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Hook type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Hook updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   *
   * @return updatedAt
   **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hook hook = (Hook) o;
    return Objects.equals(this.active, hook.active) &&
           Objects.equals(this.authorizationHeader, hook.authorizationHeader) &&
           Objects.equals(this.branchFilter, hook.branchFilter) &&
           Objects.equals(this.config, hook.config) &&
           Objects.equals(this.createdAt, hook.createdAt) &&
           Objects.equals(this.events, hook.events) &&
           Objects.equals(this.id, hook.id) &&
           Objects.equals(this.type, hook.type) &&
           Objects.equals(this.updatedAt, hook.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, authorizationHeader, branchFilter, config, createdAt, events, id, type, updatedAt);
  }


  @Override
  public String toString() {

    String sb = "class Hook {\n" +
                "    active: " + toIndentedString(active) + "\n" +
                "    authorizationHeader: " + toIndentedString(authorizationHeader) + "\n" +
                "    branchFilter: " + toIndentedString(branchFilter) + "\n" +
                "    config: " + toIndentedString(config) + "\n" +
                "    createdAt: " + toIndentedString(createdAt) + "\n" +
                "    events: " + toIndentedString(events) + "\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    type: " + toIndentedString(type) + "\n" +
                "    updatedAt: " + toIndentedString(updatedAt) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
