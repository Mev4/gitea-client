/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.Objects;

/**
 * Badge represents a user badge
 */
@Schema(description = "Badge represents a user badge")
public class Badge {
  @SerializedName("description")
  private String description;

  @SerializedName("id")
  private Long id;

  @SerializedName("image_url")
  private String imageUrl;

  @SerializedName("slug")
  private String slug;

  public Badge description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   *
   * @return description
   **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Badge id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Badge imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   *
   * @return imageUrl
   **/
  @Schema(description = "")
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public Badge slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   *
   * @return slug
   **/
  @Schema(description = "")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Badge badge = (Badge) o;
    return Objects.equals(this.description, badge.description) &&
           Objects.equals(this.id, badge.id) &&
           Objects.equals(this.imageUrl, badge.imageUrl) &&
           Objects.equals(this.slug, badge.slug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, imageUrl, slug);
  }


  @Override
  public String toString() {

    String sb = "class Badge {\n" +
                "    description: " + toIndentedString(description) + "\n" +
                "    id: " + toIndentedString(id) + "\n" +
                "    imageUrl: " + toIndentedString(imageUrl) + "\n" +
                "    slug: " + toIndentedString(slug) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
