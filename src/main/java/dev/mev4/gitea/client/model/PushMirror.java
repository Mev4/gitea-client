/*
 * Gitea API
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.23.0+dev-728-g93640993e3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dev.mev4.gitea.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

/**
 * PushMirror represents information of a push mirror
 */
@Schema(description = "PushMirror represents information of a push mirror")
public class PushMirror {
  @SerializedName("created")
  private OffsetDateTime created;

  @SerializedName("interval")
  private String interval;

  @SerializedName("last_error")
  private String lastError;

  @SerializedName("last_update")
  private OffsetDateTime lastUpdate;

  @SerializedName("remote_address")
  private String remoteAddress;

  @SerializedName("remote_name")
  private String remoteName;

  @SerializedName("repo_name")
  private String repoName;

  @SerializedName("sync_on_commit")
  private Boolean syncOnCommit;

  public PushMirror created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   *
   * @return created
   **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public PushMirror interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   *
   * @return interval
   **/
  @Schema(description = "")
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }

  public PushMirror lastError(String lastError) {
    this.lastError = lastError;
    return this;
  }

  /**
   * Get lastError
   *
   * @return lastError
   **/
  @Schema(description = "")
  public String getLastError() {
    return lastError;
  }

  public void setLastError(String lastError) {
    this.lastError = lastError;
  }

  public PushMirror lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   *
   * @return lastUpdate
   **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }

  public PushMirror remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

  /**
   * Get remoteAddress
   *
   * @return remoteAddress
   **/
  @Schema(description = "")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public PushMirror remoteName(String remoteName) {
    this.remoteName = remoteName;
    return this;
  }

  /**
   * Get remoteName
   *
   * @return remoteName
   **/
  @Schema(description = "")
  public String getRemoteName() {
    return remoteName;
  }

  public void setRemoteName(String remoteName) {
    this.remoteName = remoteName;
  }

  public PushMirror repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

  /**
   * Get repoName
   *
   * @return repoName
   **/
  @Schema(description = "")
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }

  public PushMirror syncOnCommit(Boolean syncOnCommit) {
    this.syncOnCommit = syncOnCommit;
    return this;
  }

  /**
   * Get syncOnCommit
   *
   * @return syncOnCommit
   **/
  @Schema(description = "")
  public Boolean isSyncOnCommit() {
    return syncOnCommit;
  }

  public void setSyncOnCommit(Boolean syncOnCommit) {
    this.syncOnCommit = syncOnCommit;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushMirror pushMirror = (PushMirror) o;
    return Objects.equals(this.created, pushMirror.created) &&
           Objects.equals(this.interval, pushMirror.interval) &&
           Objects.equals(this.lastError, pushMirror.lastError) &&
           Objects.equals(this.lastUpdate, pushMirror.lastUpdate) &&
           Objects.equals(this.remoteAddress, pushMirror.remoteAddress) &&
           Objects.equals(this.remoteName, pushMirror.remoteName) &&
           Objects.equals(this.repoName, pushMirror.repoName) &&
           Objects.equals(this.syncOnCommit, pushMirror.syncOnCommit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, interval, lastError, lastUpdate, remoteAddress, remoteName, repoName, syncOnCommit);
  }


  @Override
  public String toString() {

    String sb = "class PushMirror {\n" +
                "    created: " + toIndentedString(created) + "\n" +
                "    interval: " + toIndentedString(interval) + "\n" +
                "    lastError: " + toIndentedString(lastError) + "\n" +
                "    lastUpdate: " + toIndentedString(lastUpdate) + "\n" +
                "    remoteAddress: " + toIndentedString(remoteAddress) + "\n" +
                "    remoteName: " + toIndentedString(remoteName) + "\n" +
                "    repoName: " + toIndentedString(repoName) + "\n" +
                "    syncOnCommit: " + toIndentedString(syncOnCommit) + "\n" +
                "}";
    return sb;
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
